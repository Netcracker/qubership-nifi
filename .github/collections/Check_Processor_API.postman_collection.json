{
	"info": {
		"_postman_id": "b38d7675-73dc-4557-b1bb-a1319d15a573",
		"name": "Check_Processor_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Process Group",
			"item": [
				{
					"name": "Create Process Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = pm.variables.replaceIn('{{$guid}}');\r",
									"pm.environment.set(\"nifi.client.id\", uuid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"processGroupRevision\": {\r\n        \"clientId\": \"{{nifi.client.id}}\",\r\n        \"version\": 0\r\n    },\r\n    \"versionedFlowSnapshot\": {\r\n        \"flowContents\": {\r\n            \"identifier\": \"1cdf334d-5db2-35b8-8c7c-c3ff525296e1\",\r\n            \"instanceIdentifier\": \"eaf3ca9c-0195-1000-012d-b77660ce6a8d\",\r\n            \"name\": \"NiFi Flow\",\r\n            \"comments\": \"\",\r\n            \"position\": {\r\n                \"x\": 0.0,\r\n                \"y\": 0.0\r\n            },\r\n            \"processGroups\": [\r\n                {\r\n                    \"identifier\": \"380175db-6284-3a2b-9c0b-85d252b32c31\",\r\n                    \"instanceIdentifier\": \"7176aa47-ee45-3b5d-f139-3a1cb7890c08\",\r\n                    \"name\": \"Check Processors API\",\r\n                    \"comments\": \"\",\r\n                    \"position\": {\r\n                        \"x\": 2147.9298836104376,\r\n                        \"y\": 58.975844756117453\r\n                    },\r\n                    \"processGroups\": [\r\n                    ],\r\n                    \"remoteProcessGroups\": [\r\n                    ],\r\n                    \"processors\": [\r\n                        {\r\n                            \"identifier\": \"093b8823-3070-3d0b-b3f4-63f8bf3de4f7\",\r\n                            \"instanceIdentifier\": \"b3f464aa-d614-3983-e159-f43e7a9dc39c\",\r\n                            \"name\": \"TestProcessors\",\r\n                            \"comments\": \"\",\r\n                            \"position\": {\r\n                                \"x\": 564.99998475119935,\r\n                                \"y\": 369.00000507875933\r\n                            },\r\n                            \"type\": \"org.apache.nifi.processors.standard.GenerateFlowFile\",\r\n                            \"bundle\": {\r\n                                \"group\": \"org.apache.nifi\",\r\n                                \"artifact\": \"nifi-standard-nar\",\r\n                                \"version\": \"1.28.1\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"character-set\": \"UTF-8\",\r\n                                \"File Size\": \"0B\",\r\n                                \"mime-type\": null,\r\n                                \"generate-ff-custom-text\": null,\r\n                                \"Batch Size\": \"1\",\r\n                                \"Unique FlowFiles\": \"false\",\r\n                                \"Data Format\": \"Text\"\r\n                            },\r\n                            \"propertyDescriptors\": {\r\n                                \"character-set\": {\r\n                                    \"name\": \"character-set\",\r\n                                    \"displayName\": \"Character Set\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"File Size\": {\r\n                                    \"name\": \"File Size\",\r\n                                    \"displayName\": \"File Size\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"mime-type\": {\r\n                                    \"name\": \"mime-type\",\r\n                                    \"displayName\": \"Mime Type\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"generate-ff-custom-text\": {\r\n                                    \"name\": \"generate-ff-custom-text\",\r\n                                    \"displayName\": \"Custom Text\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Batch Size\": {\r\n                                    \"name\": \"Batch Size\",\r\n                                    \"displayName\": \"Batch Size\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Unique FlowFiles\": {\r\n                                    \"name\": \"Unique FlowFiles\",\r\n                                    \"displayName\": \"Unique FlowFiles\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Data Format\": {\r\n                                    \"name\": \"Data Format\",\r\n                                    \"displayName\": \"Data Format\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                }\r\n                            },\r\n                            \"style\": {\r\n                            },\r\n                            \"schedulingPeriod\": \"1 min\",\r\n                            \"schedulingStrategy\": \"TIMER_DRIVEN\",\r\n                            \"executionNode\": \"ALL\",\r\n                            \"penaltyDuration\": \"30 sec\",\r\n                            \"yieldDuration\": \"1 sec\",\r\n                            \"bulletinLevel\": \"WARN\",\r\n                            \"runDurationMillis\": 0,\r\n                            \"concurrentlySchedulableTaskCount\": 1,\r\n                            \"autoTerminatedRelationships\": [\r\n                            ],\r\n                            \"scheduledState\": \"ENABLED\",\r\n                            \"retryCount\": 10,\r\n                            \"retriedRelationships\": [\r\n                            ],\r\n                            \"backoffMechanism\": \"PENALIZE_FLOWFILE\",\r\n                            \"maxBackoffPeriod\": \"10 mins\",\r\n                            \"componentType\": \"PROCESSOR\",\r\n                            \"groupIdentifier\": \"380175db-6284-3a2b-9c0b-85d252b32c31\"\r\n                        },\r\n                        {\r\n                            \"identifier\": \"6ce392f2-e6fe-3569-bd7c-1c0367d8f01c\",\r\n                            \"instanceIdentifier\": \"b433b072-c6d7-3a84-8e23-0334cdffcf37\",\r\n                            \"name\": \"LogAttribute\",\r\n                            \"comments\": \"\",\r\n                            \"position\": {\r\n                                \"x\": 1456.0,\r\n                                \"y\": 360.0\r\n                            },\r\n                            \"type\": \"org.apache.nifi.processors.standard.LogAttribute\",\r\n                            \"bundle\": {\r\n                                \"group\": \"org.apache.nifi\",\r\n                                \"artifact\": \"nifi-standard-nar\",\r\n                                \"version\": \"1.28.1\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"Log prefix\": null,\r\n                                \"character-set\": \"UTF-8\",\r\n                                \"Log FlowFile Properties\": \"true\",\r\n                                \"Log Level\": \"info\",\r\n                                \"attributes-to-ignore-regex\": null,\r\n                                \"Attributes to Ignore\": null,\r\n                                \"Attributes to Log\": null,\r\n                                \"attributes-to-log-regex\": \".*\",\r\n                                \"Output Format\": \"Line per Attribute\",\r\n                                \"Log Payload\": \"false\"\r\n                            },\r\n                            \"propertyDescriptors\": {\r\n                                \"Log prefix\": {\r\n                                    \"name\": \"Log prefix\",\r\n                                    \"displayName\": \"Log prefix\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"character-set\": {\r\n                                    \"name\": \"character-set\",\r\n                                    \"displayName\": \"Character Set\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Log FlowFile Properties\": {\r\n                                    \"name\": \"Log FlowFile Properties\",\r\n                                    \"displayName\": \"Log FlowFile Properties\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Log Level\": {\r\n                                    \"name\": \"Log Level\",\r\n                                    \"displayName\": \"Log Level\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"attributes-to-ignore-regex\": {\r\n                                    \"name\": \"attributes-to-ignore-regex\",\r\n                                    \"displayName\": \"Attributes to Ignore by Regular Expression\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Attributes to Ignore\": {\r\n                                    \"name\": \"Attributes to Ignore\",\r\n                                    \"displayName\": \"Attributes to Ignore\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Attributes to Log\": {\r\n                                    \"name\": \"Attributes to Log\",\r\n                                    \"displayName\": \"Attributes to Log\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"attributes-to-log-regex\": {\r\n                                    \"name\": \"attributes-to-log-regex\",\r\n                                    \"displayName\": \"Attributes to Log by Regular Expression\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Output Format\": {\r\n                                    \"name\": \"Output Format\",\r\n                                    \"displayName\": \"Output Format\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                },\r\n                                \"Log Payload\": {\r\n                                    \"name\": \"Log Payload\",\r\n                                    \"displayName\": \"Log Payload\",\r\n                                    \"identifiesControllerService\": false,\r\n                                    \"sensitive\": false\r\n                                }\r\n                            },\r\n                            \"style\": {\r\n                            },\r\n                            \"schedulingPeriod\": \"0 sec\",\r\n                            \"schedulingStrategy\": \"TIMER_DRIVEN\",\r\n                            \"executionNode\": \"ALL\",\r\n                            \"penaltyDuration\": \"30 sec\",\r\n                            \"yieldDuration\": \"1 sec\",\r\n                            \"bulletinLevel\": \"WARN\",\r\n                            \"runDurationMillis\": 25,\r\n                            \"concurrentlySchedulableTaskCount\": 1,\r\n                            \"autoTerminatedRelationships\": [\r\n                                \"success\"\r\n                            ],\r\n                            \"scheduledState\": \"ENABLED\",\r\n                            \"retryCount\": 10,\r\n                            \"retriedRelationships\": [\r\n                            ],\r\n                            \"backoffMechanism\": \"PENALIZE_FLOWFILE\",\r\n                            \"maxBackoffPeriod\": \"10 mins\",\r\n                            \"componentType\": \"PROCESSOR\",\r\n                            \"groupIdentifier\": \"380175db-6284-3a2b-9c0b-85d252b32c31\"\r\n                        }\r\n                    ],\r\n                    \"inputPorts\": [\r\n                    ],\r\n                    \"outputPorts\": [\r\n                    ],\r\n                    \"connections\": [\r\n                        {\r\n                            \"identifier\": \"6a0da3b0-8c2f-3361-abc3-57fca6978402\",\r\n                            \"instanceIdentifier\": \"f5888a0a-c387-371d-6d97-1b8278eaf5e4\",\r\n                            \"name\": \"\",\r\n                            \"source\": {\r\n                                \"id\": \"093b8823-3070-3d0b-b3f4-63f8bf3de4f7\",\r\n                                \"type\": \"PROCESSOR\",\r\n                                \"groupId\": \"380175db-6284-3a2b-9c0b-85d252b32c31\",\r\n                                \"name\": \"TestProcessors\",\r\n                                \"comments\": \"\",\r\n                                \"instanceIdentifier\": \"b3f464aa-d614-3983-e159-f43e7a9dc39c\"\r\n                            },\r\n                            \"destination\": {\r\n                                \"id\": \"6ce392f2-e6fe-3569-bd7c-1c0367d8f01c\",\r\n                                \"type\": \"PROCESSOR\",\r\n                                \"groupId\": \"380175db-6284-3a2b-9c0b-85d252b32c31\",\r\n                                \"name\": \"LogAttribute\",\r\n                                \"comments\": \"\",\r\n                                \"instanceIdentifier\": \"b433b072-c6d7-3a84-8e23-0334cdffcf37\"\r\n                            },\r\n                            \"labelIndex\": 1,\r\n                            \"zIndex\": 0,\r\n                            \"selectedRelationships\": [\r\n                                \"success\"\r\n                            ],\r\n                            \"backPressureObjectThreshold\": 10000,\r\n                            \"backPressureDataSizeThreshold\": \"1 GB\",\r\n                            \"flowFileExpiration\": \"0 sec\",\r\n                            \"prioritizers\": [\r\n                            ],\r\n                            \"bends\": [\r\n                            ],\r\n                            \"loadBalanceStrategy\": \"DO_NOT_LOAD_BALANCE\",\r\n                            \"partitioningAttribute\": \"\",\r\n                            \"loadBalanceCompression\": \"DO_NOT_COMPRESS\",\r\n                            \"componentType\": \"CONNECTION\",\r\n                            \"groupIdentifier\": \"380175db-6284-3a2b-9c0b-85d252b32c31\"\r\n                        }\r\n                    ],\r\n                    \"labels\": [\r\n                    ],\r\n                    \"funnels\": [\r\n                    ],\r\n                    \"controllerServices\": [\r\n                    ],\r\n                    \"variables\": {\r\n                    },\r\n                    \"defaultFlowFileExpiration\": \"0 sec\",\r\n                    \"defaultBackPressureObjectThreshold\": 10000,\r\n                    \"defaultBackPressureDataSizeThreshold\": \"1 GB\",\r\n                    \"flowFileConcurrency\": \"UNBOUNDED\",\r\n                    \"flowFileOutboundPolicy\": \"STREAM_WHEN_AVAILABLE\",\r\n                    \"componentType\": \"PROCESS_GROUP\",\r\n                    \"groupIdentifier\": \"1cdf334d-5db2-35b8-8c7c-c3ff525296e1\"\r\n                }\r\n            ],\r\n            \"remoteProcessGroups\": [\r\n            ],\r\n            \"processors\": [\r\n            ],\r\n            \"inputPorts\": [\r\n            ],\r\n            \"outputPorts\": [\r\n            ],\r\n            \"connections\": [\r\n            ],\r\n            \"labels\": [\r\n            ],\r\n            \"funnels\": [\r\n            ],\r\n            \"controllerServices\": [\r\n            ],\r\n            \"variables\": {\r\n            },\r\n            \"defaultFlowFileExpiration\": \"0 sec\",\r\n            \"defaultBackPressureObjectThreshold\": 10000,\r\n            \"defaultBackPressureDataSizeThreshold\": \"1 GB\",\r\n            \"flowFileConcurrency\": \"UNBOUNDED\",\r\n            \"flowFileOutboundPolicy\": \"STREAM_WHEN_AVAILABLE\",\r\n            \"componentType\": \"PROCESS_GROUP\"\r\n        },\r\n        \"externalControllerServices\": {\r\n        },\r\n        \"parameterContexts\": {\r\n        },\r\n        \"flowEncodingVersion\": \"1.0\",\r\n        \"parameterProviders\": {\r\n        },\r\n        \"latest\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nifi.url}}/nifi-api/process-groups/root/flow-contents",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"process-groups",
								"root",
								"flow-contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Id of process group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Get Id of process group\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var processGroups = jsonData.processGroups;\r",
									"    var result = false;\r",
									"    for (var i = 0; i < processGroups.length; i++) {\r",
									"        var pg = processGroups[i]\r",
									"        if (pg.component.name == \"Check Processors API\") {\r",
									"            pm.environment.set(\"process.group.id\", pg.component.id);\r",
									"            result = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(result).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nifi.url}}/nifi-api/process-groups/root/process-groups",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"process-groups",
								"root",
								"process-groups"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Processors Api",
			"item": [
				{
					"name": "Get processors id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Get processors id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var processors = jsonData.processors;\r",
									"    var result = false;\r",
									"    for (var i = 0; i < processors.length; i++) {\r",
									"        var proc = processors[i]\r",
									"        if (proc.component.name == \"TestProcessors\") {\r",
									"            pm.environment.set(\"processor.id\", proc.component.id);\r",
									"            result = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(result).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{nifi.url}}/nifi-api/process-groups/{{process.group.id}}/processors",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"process-groups",
								"{{process.group.id}}",
								"processors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get information about processor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{nifi.url}}/nifi-api/processors/{{processor.id}}",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"processors",
								"{{processor.id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set property on processors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = pm.variables.replaceIn('{{$guid}}');\r",
									"pm.environment.set(\"nifi.client.id\", uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"revision\": {\r\n        \"clientId\": \"{{nifi.client.id}}\",\r\n        \"version\": 0\r\n    },\r\n    \"component\": {\r\n        \"id\": \"{{processor.id}}\",\r\n        \"config\": {\r\n            \"properties\": {\r\n                \"generate-ff-custom-text\": \"test-value\"\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nifi.url}}/nifi-api/processors/{{processor.id}}",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"processors",
								"{{processor.id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start processor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = pm.variables.replaceIn('{{$guid}}');\r",
									"pm.environment.set(\"nifi.client.id\", uuid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"revision\": {\r\n    \"clientId\": \"{{nifi.client.id}}\",\r\n    \"version\": 1\r\n  },\r\n  \"state\": \"RUNNING\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nifi.url}}/nifi-api/processors/{{processor.id}}/run-status",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"processors",
								"{{processor.id}}",
								"run-status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stop processor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = pm.variables.replaceIn('{{$guid}}');\r",
									"pm.environment.set(\"nifi.client.id\", uuid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"revision\": {\r\n    \"clientId\": \"{{nifi.client.id}}\",\r\n    \"version\": 2\r\n  },\r\n  \"state\": \"STOPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nifi.url}}/nifi-api/processors/{{processor.id}}/run-status",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"processors",
								"{{processor.id}}",
								"run-status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating a processor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Getting the id of the created processor\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"created.processor.id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = pm.variables.replaceIn('{{$guid}}');\r",
									"pm.environment.set(\"nifi.client.id\", uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"revision\": {\r\n    \"clientId\": \"{{nifi.client.id}}\",\r\n    \"version\": 0\r\n  },\r\n  \"component\": {\r\n    \"type\": \"org.apache.nifi.processors.standard.GenerateFlowFile\",\r\n    \"name\": \"Create\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nifi.url}}/nifi-api/process-groups/{{process.group.id}}/processors",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"process-groups",
								"{{process.group.id}}",
								"processors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating a funnel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Getting the id of the created funnel\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"created.funnel.id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = pm.variables.replaceIn('{{$guid}}');\r",
									"pm.environment.set(\"nifi.client.id\", uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"revision\": {\r\n    \"clientId\": \"{{nifi.client.id}}\",\r\n    \"version\": 0\r\n  },\r\n  \"component\": {\r\n    \"position\": {\r\n      \"x\": 100,\r\n      \"y\": 200\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nifi.url}}/nifi-api/process-groups/{{process.group.id}}/funnels",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"process-groups",
								"{{process.group.id}}",
								"funnels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create connection between procerssor and funel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = pm.variables.replaceIn('{{$guid}}');\r",
									"pm.environment.set(\"nifi.client.id\", uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"revision\": {\r\n    \"clientId\": \"{{nifi.client.id}}\",\r\n    \"version\": 0\r\n  },\r\n  \"component\": {\r\n    \"name\": \"Test Connection\",\r\n    \"source\": {\r\n      \"id\": \"{{created.processor.id}}\",\r\n      \"groupId\": \"{{process.group.id}}\",\r\n      \"type\": \"PROCESSOR\"\r\n    },\r\n    \"destination\": {\r\n      \"id\": \"{{created.funnel.id}}\",\r\n      \"groupId\": \"{{process.group.id}}\",\r\n      \"type\": \"FUNNEL\"\r\n    },\r\n    \"selectedRelationships\": [\"success\"]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{nifi.url}}/nifi-api/process-groups/{{process.group.id}}/connections",
							"host": [
								"{{nifi.url}}"
							],
							"path": [
								"nifi-api",
								"process-groups",
								"{{process.group.id}}",
								"connections"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}