---
name: 'Run NiFi 3 node cluster in oidc mode and execute autotests'
description: 'Runs 3 node NiFi cluster in oidc mode, nifi-registry, as well as supporting services (Consul, keycloak, PostgreSQL) and executes autotests'
inputs:
  results-dir:
    description: 'Directory to store results'
    required: false
    default: 'cluster'
runs:
  using: "composite"
  steps:
    - name: Prepare env
      shell: bash
      run: |
        echo "Preparing env..."
        chmod +x .github/workflows/sh/*.sh
        . .github/workflows/sh/nifi-lib.sh
        prepare_sens_key
        prepare_results_dir "${{ inputs.results-dir }}"
        generate_tls_passwords
        create_docker_env_file
        create_global_vars_file
        mkdir -p ./temp-vol/tls-cert/
        mkdir -p ./temp-vol/tls-cert/ca/
        mkdir -p ./temp-vol/tls-cert/nifi/
        mkdir -p ./temp-vol/tls-cert/qubership-nifi-0/
        mkdir -p ./temp-vol/tls-cert/qubership-nifi-1/
        mkdir -p ./temp-vol/tls-cert/qubership-nifi-2/
        mkdir -p ./temp-vol/tls-cert/nifi-registry/
        mkdir -p ./temp-vol/nifi-0/per-conf/
        mkdir -p ./temp-vol/nifi-1/per-conf/
        mkdir -p ./temp-vol/nifi-2/per-conf/
        mkdir -p ./temp-vol/pg-db/
        chmod -R 777 ./temp-vol
        generate_add_nifi_certs
    - name: Run local nifi
      shell: bash
      run: |
        export NIFI_SENSITIVE_KEY=$(cat ./nifi-sens-key.tmp)
        echo "Starting containers..."
        docker compose -f .github/docker/cluster/docker-compose.yaml --env-file ./docker.env up -d
    - name: Wait for nifi container to start
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        NIFI_CLIENT_PASSWORD=$(cat ./temp-vol/tls-cert/nifi/CN=admin_OU=NIFI.password)
        wait_nifi_container "15" "60" "localhost" "8080" "true" ".github/docker/cluster/docker-compose.yaml" "${{ inputs.results-dir }}" \
        "./temp-vol/tls-cert/nifi/nifi-cert.pem" "./temp-vol/tls-cert/nifi/CN=admin_OU=NIFI.p12" \
        "$NIFI_CLIENT_PASSWORD"
    - name: Test log level configuration
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        test_log_level 'org.qubership.test.pkg2' 'DEBUG' '${{ inputs.results-dir }}' 'qubership-nifi-0'
    - name: Run collection for setup policies
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'Setup_Access_Policies.postman_collection.json'
        env-name: 'NiFi_AT_TLS.json.postman_environment'
        results-dir: '${{ inputs.results-dir }}'
        short-name: 'policies'
        tls-certs-dir: "./temp-vol/tls-cert"
        tls-ca-certs: "nifi/nifi-cert.pem"
        tls-client-certs-config: "newman-tls-config.json"
        docker-compose-file: ".github/docker/cluster/docker-compose.yaml"
    - name: Run basic nifi API tests
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'NiFi_Basic_API_Tests.postman_collection.json'
        env-name: 'NiFi_AT_TLS.json.postman_environment'
        results-dir: '${{ inputs.results-dir }}'
        short-name: 'basic'
        tls-certs-dir: "./temp-vol/tls-cert"
        tls-ca-certs: "nifi/nifi-cert.pem"
        tls-client-certs-config: "newman-tls-config.json"
        docker-compose-file: ".github/docker/cluster/docker-compose.yaml"
    - name: Run processors nifi API tests
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'Check_Processor_API.postman_collection.json'
        env-name: 'NiFi_AT_TLS.json.postman_environment'
        results-dir: '${{ inputs.results-dir }}'
        short-name: 'processors'
        tls-certs-dir: "./temp-vol/tls-cert"
        tls-ca-certs: "nifi/nifi-cert.pem"
        tls-client-certs-config: "newman-tls-config.json"
        docker-compose-file: ".github/docker/cluster/docker-compose.yaml"
    - name: Cleanup after tests
      shell: bash
      continue-on-error: true
      run: |
        export NIFI_SENSITIVE_KEY=$(cat ./nifi-sens-key.tmp)
        echo "Stopping and removing containers"
        docker compose -f .github/docker/cluster/docker-compose.yaml --env-file ./docker.env down -v
        sudo rm -rf ./temp-vol/
