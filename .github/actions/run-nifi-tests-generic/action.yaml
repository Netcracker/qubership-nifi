---
name: 'Run NiFi in specified mode and execute autotests'
description: 'Runs NiFi in specified mode with auxiliary services (e.g. Consul, keycloak, PostgreSQL) and executes autotests'
inputs:
  run-mode:
    description: 'Autotest run mode. One of: plain, tls, oidc, cluster.'
    required: false
    default: 'oidc'
runs:
  using: "composite"
  steps:
    - name: Prepare env
      shell: bash
      run: |
        echo "Preparing env..."
        . .github/workflows/sh/nifi-lib.sh
        setup_env_before_tests "${{ inputs.run-mode }}"
    - name: Run local nifi
      shell: bash
      run: |
        export NIFI_SENSITIVE_KEY=$(cat ./nifi-sens-key.tmp)
        echo "Starting containers..."
        docker compose -f .github/docker/${{ inputs.run-mode }}/docker-compose.yaml --env-file ./docker.env up -d
    - name: Wait for nifi container to start (plain)
      if: ${{ inputs.run-mode != 'plain' }}
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        wait_nifi_container "15" "60" "localhost" "8080" "false" ".github/docker/${{ inputs.run-mode }}/docker-compose.yaml" "${{ inputs.run-mode }}"
    - name: Wait for nifi container to start (TLS)
      if: ${{ inputs.run-mode != 'plain' }}
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        NIFI_CLIENT_PASSWORD=$(cat ./temp-vol/tls-cert/nifi/CN=admin_OU=NIFI.password)
        wait_nifi_container "15" "150" "localhost" "8080" "true" ".github/docker/${{ inputs.run-mode }}/docker-compose.yaml" "${{ inputs.run-mode }}" \
        "./temp-vol/tls-cert/nifi/nifi-cert.pem" "./temp-vol/tls-cert/nifi/CN=admin_OU=NIFI.p12" \
        "$NIFI_CLIENT_PASSWORD"
    - name: Test log level configuration
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        test_log_level 'org.qubership.test.pkg2' 'DEBUG' '${{ inputs.run-mode }}' 'local-nifi'
    - name: Run collection for setup policies
      if: ${{ inputs.run-mode != 'plain' }}
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'Setup_Access_Policies.postman_collection.json'
        env-name: 'NiFi_AT_TLS.json.postman_environment'
        results-dir: '${{ inputs.run-mode }}'
        short-name: 'policies'
        tls-certs-dir: "./temp-vol/tls-cert"
        tls-ca-certs: "nifi/nifi-cert.pem"
        tls-client-certs-config: "newman-tls-config.json"
        docker-compose-file: ".github/docker/${{ inputs.run-mode }}/docker-compose.yaml"
    - name: Run basic nifi API tests
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'NiFi_Basic_API_Tests.postman_collection.json'
        env-name: ${{ inputs.run-mode != 'plain' && 'NiFi_AT_TLS.json.postman_environment' || 'NiFi_AT.json.postman_environment' }}
        results-dir: '${{ inputs.run-mode }}'
        short-name: 'basic'
        tls-certs-dir: ${{ inputs.run-mode != 'plain' && './temp-vol/tls-cert' || '' }}
        tls-ca-certs: ${{ inputs.run-mode != 'plain' && 'nifi/nifi-cert.pem' || '' }}
        tls-client-certs-config: ${{ inputs.run-mode != 'plain' && 'newman-tls-config.json' || '' }}
        docker-compose-file: ".github/docker/${{ inputs.run-mode }}/docker-compose.yaml"
    - name: Run processors nifi API tests
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'Check_Processor_API.postman_collection.json'
        env-name: ${{ inputs.run-mode != 'plain' && 'NiFi_AT_TLS.json.postman_environment' || 'NiFi_AT.json.postman_environment' }}
        results-dir: '${{ inputs.run-mode }}'
        short-name: 'processors'
        tls-certs-dir: ${{ inputs.run-mode != 'plain' && './temp-vol/tls-cert' || '' }}
        tls-ca-certs: ${{ inputs.run-mode != 'plain' && 'nifi/nifi-cert.pem' || '' }}
        tls-client-certs-config: ${{ inputs.run-mode != 'plain' && 'newman-tls-config.json' || '' }}
        docker-compose-file: ".github/docker/${{ inputs.run-mode }}/docker-compose.yaml"
    - name: Run configuration restore tests (Success case)
      if: ${{ inputs.run-mode != 'cluster' }}
      continue-on-error: true
      uses: ./.github/actions/run-conf-restore-test
      with:
        results-dir: '${{ inputs.run-mode }}'
        docker-compose-path: '.github/docker/${{ inputs.run-mode }}/docker-compose.yaml'
        tls-mode: ${{ inputs.run-mode != 'plain' }}
        success-scenario: 'true'
    - name: Run configuration restore tests (Error case)
      if: ${{ inputs.run-mode != 'cluster' }}
      continue-on-error: true
      uses: ./.github/actions/run-conf-restore-test
      with:
        results-dir: '${{ inputs.run-mode }}'
        docker-compose-path: '.github/docker/${{ inputs.run-mode }}/docker-compose.yaml'
        tls-mode: ${{ inputs.run-mode != 'plain' }}
        success-scenario: 'false'
    - name: Run E2E test
      if: ${{ inputs.run-mode == 'oidc' }}
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'NiFi_E2E_API_Tests.postman_collection.json'
        env-name: ${{ inputs.run-mode != 'plain' && 'NiFi_AT_TLS.json.postman_environment' || 'NiFi_AT.json.postman_environment' }}
        results-dir: '${{ inputs.run-mode }}'
        short-name: 'e2e'
        tls-certs-dir: "./temp-vol/tls-cert"
        tls-ca-certs: "nifi/nifi-cert.pem"
        tls-client-certs-config: "newman-tls-config.json"
        global-vars-file-name: "Global_Vars.postman_globals.json"
        docker-compose-file: ".github/docker/${{ inputs.run-mode }}/docker-compose.yaml"
    - name: Cleanup after tests
      shell: bash
      continue-on-error: true
      run: |
        export NIFI_SENSITIVE_KEY=$(cat ./nifi-sens-key.tmp)
        echo "Stopping and removing containers"
        docker compose -f .github/docker/${{ inputs.run-mode }}/docker-compose.yaml --env-file ./docker.env down -v
        sudo rm -rf ./temp-vol/
